// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: runner.proto

package runner

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogResponseMsg_Container_Request_Line_Source int32

const (
	LogResponseMsg_Container_Request_Line_STDOUT LogResponseMsg_Container_Request_Line_Source = 0
	LogResponseMsg_Container_Request_Line_STDERR LogResponseMsg_Container_Request_Line_Source = 1
)

// Enum value maps for LogResponseMsg_Container_Request_Line_Source.
var (
	LogResponseMsg_Container_Request_Line_Source_name = map[int32]string{
		0: "STDOUT",
		1: "STDERR",
	}
	LogResponseMsg_Container_Request_Line_Source_value = map[string]int32{
		"STDOUT": 0,
		"STDERR": 1,
	}
)

func (x LogResponseMsg_Container_Request_Line_Source) Enum() *LogResponseMsg_Container_Request_Line_Source {
	p := new(LogResponseMsg_Container_Request_Line_Source)
	*p = x
	return p
}

func (x LogResponseMsg_Container_Request_Line_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogResponseMsg_Container_Request_Line_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_runner_proto_enumTypes[0].Descriptor()
}

func (LogResponseMsg_Container_Request_Line_Source) Type() protoreflect.EnumType {
	return &file_runner_proto_enumTypes[0]
}

func (x LogResponseMsg_Container_Request_Line_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogResponseMsg_Container_Request_Line_Source.Descriptor instead.
func (LogResponseMsg_Container_Request_Line_Source) EnumDescriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{12, 0, 0, 0, 0}
}

// Request to allocate a slot for a call
type TryCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelsCallJson string            `protobuf:"bytes,1,opt,name=models_call_json,json=modelsCallJson,proto3" json:"models_call_json,omitempty"`
	SlotHashId     string            `protobuf:"bytes,2,opt,name=slot_hash_id,json=slotHashId,proto3" json:"slot_hash_id,omitempty"`
	Extensions     map[string]string `protobuf:"bytes,3,rep,name=extensions,proto3" json:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TryCall) Reset() {
	*x = TryCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryCall) ProtoMessage() {}

func (x *TryCall) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryCall.ProtoReflect.Descriptor instead.
func (*TryCall) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{0}
}

func (x *TryCall) GetModelsCallJson() string {
	if x != nil {
		return x.ModelsCallJson
	}
	return ""
}

func (x *TryCall) GetSlotHashId() string {
	if x != nil {
		return x.SlotHashId
	}
	return ""
}

func (x *TryCall) GetExtensions() map[string]string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

// Data sent C2S and S2C - as soon as the runner sees the first of these it
// will start running. If empty content, there must be one of these with eof.
// The runner will send these for the body of the response, AFTER it has sent
// a CallEnding message.
type DataFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Eof  bool   `protobuf:"varint,2,opt,name=eof,proto3" json:"eof,omitempty"`
}

func (x *DataFrame) Reset() {
	*x = DataFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFrame) ProtoMessage() {}

func (x *DataFrame) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFrame.ProtoReflect.Descriptor instead.
func (*DataFrame) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{1}
}

func (x *DataFrame) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DataFrame) GetEof() bool {
	if x != nil {
		return x.Eof
	}
	return false
}

type HttpHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *HttpHeader) Reset() {
	*x = HttpHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpHeader) ProtoMessage() {}

func (x *HttpHeader) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpHeader.ProtoReflect.Descriptor instead.
func (*HttpHeader) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{2}
}

func (x *HttpHeader) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HttpHeader) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type HttpRespMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32         `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Headers    []*HttpHeader `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *HttpRespMeta) Reset() {
	*x = HttpRespMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpRespMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRespMeta) ProtoMessage() {}

func (x *HttpRespMeta) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRespMeta.ProtoReflect.Descriptor instead.
func (*HttpRespMeta) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{3}
}

func (x *HttpRespMeta) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *HttpRespMeta) GetHeaders() []*HttpHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

// Call has started to finish - data might not be here yet and it will be sent
// as DataFrames.
type CallResultStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Meta:
	//
	//	*CallResultStart_Http
	Meta isCallResultStart_Meta `protobuf_oneof:"meta"`
}

func (x *CallResultStart) Reset() {
	*x = CallResultStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallResultStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallResultStart) ProtoMessage() {}

func (x *CallResultStart) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallResultStart.ProtoReflect.Descriptor instead.
func (*CallResultStart) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{4}
}

func (m *CallResultStart) GetMeta() isCallResultStart_Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (x *CallResultStart) GetHttp() *HttpRespMeta {
	if x, ok := x.GetMeta().(*CallResultStart_Http); ok {
		return x.Http
	}
	return nil
}

type isCallResultStart_Meta interface {
	isCallResultStart_Meta()
}

type CallResultStart_Http struct {
	Http *HttpRespMeta `protobuf:"bytes,100,opt,name=http,proto3,oneof"`
}

func (*CallResultStart_Http) isCallResultStart_Meta() {}

// Call has really finished, it might have completed or crashed
type CallFinished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success               bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Details               string `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	ErrorCode             int32  `protobuf:"varint,3,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorStr              string `protobuf:"bytes,4,opt,name=errorStr,proto3" json:"errorStr,omitempty"`
	CreatedAt             string `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	StartedAt             string `protobuf:"bytes,6,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	CompletedAt           string `protobuf:"bytes,7,opt,name=completedAt,proto3" json:"completedAt,omitempty"`
	SchedulerDuration     int64  `protobuf:"varint,8,opt,name=schedulerDuration,proto3" json:"schedulerDuration,omitempty"`
	ExecutionDuration     int64  `protobuf:"varint,9,opt,name=executionDuration,proto3" json:"executionDuration,omitempty"`
	ErrorUser             bool   `protobuf:"varint,10,opt,name=errorUser,proto3" json:"errorUser,omitempty"`
	Image                 string `protobuf:"bytes,11,opt,name=image,proto3" json:"image,omitempty"`
	ImagePullWaitDuration int64  `protobuf:"varint,12,opt,name=imagePullWaitDuration,proto3" json:"imagePullWaitDuration,omitempty"`
	CtrPrepDuration       int64  `protobuf:"varint,13,opt,name=ctrPrepDuration,proto3" json:"ctrPrepDuration,omitempty"`
	CtrCreateDuration     int64  `protobuf:"varint,14,opt,name=ctrCreateDuration,proto3" json:"ctrCreateDuration,omitempty"`
	InitStartTime         int64  `protobuf:"varint,15,opt,name=initStartTime,proto3" json:"initStartTime,omitempty"`
}

func (x *CallFinished) Reset() {
	*x = CallFinished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallFinished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallFinished) ProtoMessage() {}

func (x *CallFinished) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallFinished.ProtoReflect.Descriptor instead.
func (*CallFinished) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{5}
}

func (x *CallFinished) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CallFinished) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *CallFinished) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *CallFinished) GetErrorStr() string {
	if x != nil {
		return x.ErrorStr
	}
	return ""
}

func (x *CallFinished) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CallFinished) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *CallFinished) GetCompletedAt() string {
	if x != nil {
		return x.CompletedAt
	}
	return ""
}

func (x *CallFinished) GetSchedulerDuration() int64 {
	if x != nil {
		return x.SchedulerDuration
	}
	return 0
}

func (x *CallFinished) GetExecutionDuration() int64 {
	if x != nil {
		return x.ExecutionDuration
	}
	return 0
}

func (x *CallFinished) GetErrorUser() bool {
	if x != nil {
		return x.ErrorUser
	}
	return false
}

func (x *CallFinished) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CallFinished) GetImagePullWaitDuration() int64 {
	if x != nil {
		return x.ImagePullWaitDuration
	}
	return 0
}

func (x *CallFinished) GetCtrPrepDuration() int64 {
	if x != nil {
		return x.CtrPrepDuration
	}
	return 0
}

func (x *CallFinished) GetCtrCreateDuration() int64 {
	if x != nil {
		return x.CtrCreateDuration
	}
	return 0
}

func (x *CallFinished) GetInitStartTime() int64 {
	if x != nil {
		return x.InitStartTime
	}
	return 0
}

type ClientMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//
	//	*ClientMsg_Try
	//	*ClientMsg_Data
	Body isClientMsg_Body `protobuf_oneof:"body"`
}

func (x *ClientMsg) Reset() {
	*x = ClientMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMsg) ProtoMessage() {}

func (x *ClientMsg) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMsg.ProtoReflect.Descriptor instead.
func (*ClientMsg) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{6}
}

func (m *ClientMsg) GetBody() isClientMsg_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *ClientMsg) GetTry() *TryCall {
	if x, ok := x.GetBody().(*ClientMsg_Try); ok {
		return x.Try
	}
	return nil
}

func (x *ClientMsg) GetData() *DataFrame {
	if x, ok := x.GetBody().(*ClientMsg_Data); ok {
		return x.Data
	}
	return nil
}

type isClientMsg_Body interface {
	isClientMsg_Body()
}

type ClientMsg_Try struct {
	Try *TryCall `protobuf:"bytes,1,opt,name=try,proto3,oneof"`
}

type ClientMsg_Data struct {
	Data *DataFrame `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*ClientMsg_Try) isClientMsg_Body() {}

func (*ClientMsg_Data) isClientMsg_Body() {}

type RunnerMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//
	//	*RunnerMsg_ResultStart
	//	*RunnerMsg_Data
	//	*RunnerMsg_Finished
	Body isRunnerMsg_Body `protobuf_oneof:"body"`
}

func (x *RunnerMsg) Reset() {
	*x = RunnerMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerMsg) ProtoMessage() {}

func (x *RunnerMsg) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerMsg.ProtoReflect.Descriptor instead.
func (*RunnerMsg) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{7}
}

func (m *RunnerMsg) GetBody() isRunnerMsg_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *RunnerMsg) GetResultStart() *CallResultStart {
	if x, ok := x.GetBody().(*RunnerMsg_ResultStart); ok {
		return x.ResultStart
	}
	return nil
}

func (x *RunnerMsg) GetData() *DataFrame {
	if x, ok := x.GetBody().(*RunnerMsg_Data); ok {
		return x.Data
	}
	return nil
}

func (x *RunnerMsg) GetFinished() *CallFinished {
	if x, ok := x.GetBody().(*RunnerMsg_Finished); ok {
		return x.Finished
	}
	return nil
}

type isRunnerMsg_Body interface {
	isRunnerMsg_Body()
}

type RunnerMsg_ResultStart struct {
	ResultStart *CallResultStart `protobuf:"bytes,1,opt,name=result_start,json=resultStart,proto3,oneof"`
}

type RunnerMsg_Data struct {
	Data *DataFrame `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

type RunnerMsg_Finished struct {
	Finished *CallFinished `protobuf:"bytes,3,opt,name=finished,proto3,oneof"`
}

func (*RunnerMsg_ResultStart) isRunnerMsg_Body() {}

func (*RunnerMsg_Data) isRunnerMsg_Body() {}

func (*RunnerMsg_Finished) isRunnerMsg_Body() {}

type RunnerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active                int32             `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`                                                                                                     // Number of currently inflight responses
	Failed                bool              `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`                                                                                                     // if status was successful or not
	Id                    string            `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`                                                                                                              // call id if status image was used
	Details               string            `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`                                                                                                    // response from status image
	ErrorCode             int32             `protobuf:"varint,6,opt,name=errorCode,proto3" json:"errorCode,omitempty"`                                                                                               // error code if not successful
	ErrorStr              string            `protobuf:"bytes,7,opt,name=errorStr,proto3" json:"errorStr,omitempty"`                                                                                                  // error description if not successful
	CreatedAt             string            `protobuf:"bytes,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`                                                                                                // call latency details: initialization time
	StartedAt             string            `protobuf:"bytes,9,opt,name=startedAt,proto3" json:"startedAt,omitempty"`                                                                                                // call latency details: start time in container
	CompletedAt           string            `protobuf:"bytes,10,opt,name=completedAt,proto3" json:"completedAt,omitempty"`                                                                                           // call latency details: end time
	Cached                bool              `protobuf:"varint,11,opt,name=cached,proto3" json:"cached,omitempty"`                                                                                                    // true if status response was provided from cache
	RequestsReceived      uint64            `protobuf:"varint,12,opt,name=requestsReceived,proto3" json:"requestsReceived,omitempty"`                                                                                // number of requests received by runner
	RequestsHandled       uint64            `protobuf:"varint,13,opt,name=requestsHandled,proto3" json:"requestsHandled,omitempty"`                                                                                  // number of requests processed by runner without NACK
	KdumpsOnDisk          uint64            `protobuf:"varint,14,opt,name=kdumpsOnDisk,proto3" json:"kdumpsOnDisk,omitempty"`                                                                                        // number of kdumps on local disk
	SchedulerDuration     int64             `protobuf:"varint,15,opt,name=schedulerDuration,proto3" json:"schedulerDuration,omitempty"`                                                                              // the amount of time for scheduler execution
	ExecutionDuration     int64             `protobuf:"varint,16,opt,name=executionDuration,proto3" json:"executionDuration,omitempty"`                                                                              // the amount of time for function execution
	IsNetworkDisabled     bool              `protobuf:"varint,17,opt,name=isNetworkDisabled,proto3" json:"isNetworkDisabled,omitempty"`                                                                              // returns true if runner network is not ready
	CustomStatus          map[string]string `protobuf:"bytes,18,rep,name=customStatus,proto3" json:"customStatus,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // returns any user defined healthcheck status
	ImagePullWaitDuration int64             `protobuf:"varint,19,opt,name=imagePullWaitDuration,proto3" json:"imagePullWaitDuration,omitempty"`
	CtrPrepDuration       int64             `protobuf:"varint,20,opt,name=ctrPrepDuration,proto3" json:"ctrPrepDuration,omitempty"`
	CtrCreateDuration     int64             `protobuf:"varint,21,opt,name=ctrCreateDuration,proto3" json:"ctrCreateDuration,omitempty"`
	InitStartTime         int64             `protobuf:"varint,22,opt,name=initStartTime,proto3" json:"initStartTime,omitempty"`
}

func (x *RunnerStatus) Reset() {
	*x = RunnerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerStatus) ProtoMessage() {}

func (x *RunnerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerStatus.ProtoReflect.Descriptor instead.
func (*RunnerStatus) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{8}
}

func (x *RunnerStatus) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *RunnerStatus) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *RunnerStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RunnerStatus) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *RunnerStatus) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *RunnerStatus) GetErrorStr() string {
	if x != nil {
		return x.ErrorStr
	}
	return ""
}

func (x *RunnerStatus) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *RunnerStatus) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *RunnerStatus) GetCompletedAt() string {
	if x != nil {
		return x.CompletedAt
	}
	return ""
}

func (x *RunnerStatus) GetCached() bool {
	if x != nil {
		return x.Cached
	}
	return false
}

func (x *RunnerStatus) GetRequestsReceived() uint64 {
	if x != nil {
		return x.RequestsReceived
	}
	return 0
}

func (x *RunnerStatus) GetRequestsHandled() uint64 {
	if x != nil {
		return x.RequestsHandled
	}
	return 0
}

func (x *RunnerStatus) GetKdumpsOnDisk() uint64 {
	if x != nil {
		return x.KdumpsOnDisk
	}
	return 0
}

func (x *RunnerStatus) GetSchedulerDuration() int64 {
	if x != nil {
		return x.SchedulerDuration
	}
	return 0
}

func (x *RunnerStatus) GetExecutionDuration() int64 {
	if x != nil {
		return x.ExecutionDuration
	}
	return 0
}

func (x *RunnerStatus) GetIsNetworkDisabled() bool {
	if x != nil {
		return x.IsNetworkDisabled
	}
	return false
}

func (x *RunnerStatus) GetCustomStatus() map[string]string {
	if x != nil {
		return x.CustomStatus
	}
	return nil
}

func (x *RunnerStatus) GetImagePullWaitDuration() int64 {
	if x != nil {
		return x.ImagePullWaitDuration
	}
	return 0
}

func (x *RunnerStatus) GetCtrPrepDuration() int64 {
	if x != nil {
		return x.CtrPrepDuration
	}
	return 0
}

func (x *RunnerStatus) GetCtrCreateDuration() int64 {
	if x != nil {
		return x.CtrCreateDuration
	}
	return 0
}

func (x *RunnerStatus) GetInitStartTime() int64 {
	if x != nil {
		return x.InitStartTime
	}
	return 0
}

type ConfigMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config map[string]string `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ConfigMsg) Reset() {
	*x = ConfigMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMsg) ProtoMessage() {}

func (x *ConfigMsg) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMsg.ProtoReflect.Descriptor instead.
func (*ConfigMsg) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{9}
}

func (x *ConfigMsg) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type ConfigStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigStatus) Reset() {
	*x = ConfigStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigStatus) ProtoMessage() {}

func (x *ConfigStatus) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigStatus.ProtoReflect.Descriptor instead.
func (*ConfigStatus) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{10}
}

// Collector to Runner messages
type LogRequestMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//
	//	*LogRequestMsg_Start_
	//	*LogRequestMsg_Ack_
	//	*LogRequestMsg_Ready_
	Body isLogRequestMsg_Body `protobuf_oneof:"body"`
}

func (x *LogRequestMsg) Reset() {
	*x = LogRequestMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRequestMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequestMsg) ProtoMessage() {}

func (x *LogRequestMsg) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequestMsg.ProtoReflect.Descriptor instead.
func (*LogRequestMsg) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{11}
}

func (m *LogRequestMsg) GetBody() isLogRequestMsg_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *LogRequestMsg) GetStart() *LogRequestMsg_Start {
	if x, ok := x.GetBody().(*LogRequestMsg_Start_); ok {
		return x.Start
	}
	return nil
}

func (x *LogRequestMsg) GetAck() *LogRequestMsg_Ack {
	if x, ok := x.GetBody().(*LogRequestMsg_Ack_); ok {
		return x.Ack
	}
	return nil
}

func (x *LogRequestMsg) GetReady() *LogRequestMsg_Ready {
	if x, ok := x.GetBody().(*LogRequestMsg_Ready_); ok {
		return x.Ready
	}
	return nil
}

type isLogRequestMsg_Body interface {
	isLogRequestMsg_Body()
}

type LogRequestMsg_Start_ struct {
	Start *LogRequestMsg_Start `protobuf:"bytes,1,opt,name=start,proto3,oneof"`
}

type LogRequestMsg_Ack_ struct {
	Ack *LogRequestMsg_Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

type LogRequestMsg_Ready_ struct {
	Ready *LogRequestMsg_Ready `protobuf:"bytes,3,opt,name=ready,proto3,oneof"`
}

func (*LogRequestMsg_Start_) isLogRequestMsg_Body() {}

func (*LogRequestMsg_Ack_) isLogRequestMsg_Body() {}

func (*LogRequestMsg_Ready_) isLogRequestMsg_Body() {}

// Runners to Collectors
type LogResponseMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*LogResponseMsg_Container `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"` // container logs
}

func (x *LogResponseMsg) Reset() {
	*x = LogResponseMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogResponseMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponseMsg) ProtoMessage() {}

func (x *LogResponseMsg) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponseMsg.ProtoReflect.Descriptor instead.
func (*LogResponseMsg) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{12}
}

func (x *LogResponseMsg) GetData() []*LogResponseMsg_Container {
	if x != nil {
		return x.Data
	}
	return nil
}

// Initial Logging session message sent by Collectors to Runners
type LogRequestMsg_Start struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config map[string]string `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LogRequestMsg_Start) Reset() {
	*x = LogRequestMsg_Start{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRequestMsg_Start) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequestMsg_Start) ProtoMessage() {}

func (x *LogRequestMsg_Start) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequestMsg_Start.ProtoReflect.Descriptor instead.
func (*LogRequestMsg_Start) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{11, 0}
}

func (x *LogRequestMsg_Start) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

// Acknowledgement of last data in stream: a message sent by Collectors to Runners
type LogRequestMsg_Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogRequestMsg_Ack) Reset() {
	*x = LogRequestMsg_Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRequestMsg_Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequestMsg_Ack) ProtoMessage() {}

func (x *LogRequestMsg_Ack) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequestMsg_Ack.ProtoReflect.Descriptor instead.
func (*LogRequestMsg_Ack) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{11, 1}
}

// Enable stream readiness for push: a message sent by Collectors to Runners
type LogRequestMsg_Ready struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogRequestMsg_Ready) Reset() {
	*x = LogRequestMsg_Ready{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRequestMsg_Ready) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequestMsg_Ready) ProtoMessage() {}

func (x *LogRequestMsg_Ready) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequestMsg_Ready.ProtoReflect.Descriptor instead.
func (*LogRequestMsg_Ready) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{11, 2}
}

// Per container log data
type LogResponseMsg_Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId string                              `protobuf:"bytes,1,opt,name=applicationId,proto3" json:"applicationId,omitempty"` // application id
	FunctionId    string                              `protobuf:"bytes,2,opt,name=functionId,proto3" json:"functionId,omitempty"`       // function id
	ContainerId   string                              `protobuf:"bytes,3,opt,name=containerId,proto3" json:"containerId,omitempty"`     // container id
	Data          []*LogResponseMsg_Container_Request `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`                   // request logs
}

func (x *LogResponseMsg_Container) Reset() {
	*x = LogResponseMsg_Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogResponseMsg_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponseMsg_Container) ProtoMessage() {}

func (x *LogResponseMsg_Container) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponseMsg_Container.ProtoReflect.Descriptor instead.
func (*LogResponseMsg_Container) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{12, 0}
}

func (x *LogResponseMsg_Container) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *LogResponseMsg_Container) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *LogResponseMsg_Container) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *LogResponseMsg_Container) GetData() []*LogResponseMsg_Container_Request {
	if x != nil {
		return x.Data
	}
	return nil
}

// Per request log data
type LogResponseMsg_Container_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string                                   `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"` // call request id
	Data      []*LogResponseMsg_Container_Request_Line `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`           // log lines
}

func (x *LogResponseMsg_Container_Request) Reset() {
	*x = LogResponseMsg_Container_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogResponseMsg_Container_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponseMsg_Container_Request) ProtoMessage() {}

func (x *LogResponseMsg_Container_Request) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponseMsg_Container_Request.ProtoReflect.Descriptor instead.
func (*LogResponseMsg_Container_Request) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{12, 0, 0}
}

func (x *LogResponseMsg_Container_Request) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *LogResponseMsg_Container_Request) GetData() []*LogResponseMsg_Container_Request_Line {
	if x != nil {
		return x.Data
	}
	return nil
}

// Log lines
type LogResponseMsg_Container_Request_Line struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64                                        `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                    // utc unix time msecs
	Source    LogResponseMsg_Container_Request_Line_Source `protobuf:"varint,2,opt,name=source,proto3,enum=runner.LogResponseMsg_Container_Request_Line_Source" json:"source,omitempty"` // stderr or stdout
	Data      []byte                                       `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`                                                               // opaque log data
}

func (x *LogResponseMsg_Container_Request_Line) Reset() {
	*x = LogResponseMsg_Container_Request_Line{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runner_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogResponseMsg_Container_Request_Line) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponseMsg_Container_Request_Line) ProtoMessage() {}

func (x *LogResponseMsg_Container_Request_Line) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponseMsg_Container_Request_Line.ProtoReflect.Descriptor instead.
func (*LogResponseMsg_Container_Request_Line) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{12, 0, 0, 0}
}

func (x *LogResponseMsg_Container_Request_Line) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *LogResponseMsg_Container_Request_Line) GetSource() LogResponseMsg_Container_Request_Line_Source {
	if x != nil {
		return x.Source
	}
	return LogResponseMsg_Container_Request_Line_STDOUT
}

func (x *LogResponseMsg_Container_Request_Line) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_runner_proto protoreflect.FileDescriptor

var file_runner_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd5, 0x01, 0x0a, 0x07, 0x54, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x43,
	0x61, 0x6c, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x6c, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x09, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6f,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x65, 0x6f, 0x66, 0x22, 0x34, 0x0a, 0x0a,
	0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x5d, 0x0a, 0x0c, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x22, 0x45, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70,
	0x42, 0x06, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x9e, 0x04, 0x0a, 0x0c, 0x43, 0x61, 0x6c,
	0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75,
	0x6c, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x57,
	0x61, 0x69, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x74, 0x72, 0x50, 0x72, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x74, 0x72, 0x50, 0x72, 0x65, 0x70, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x74, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x63, 0x74, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x09, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x03, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x79,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x03, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xae, 0x01, 0x0a,
	0x09, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x32, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xdd, 0x06,
	0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x6b, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6b, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x4f, 0x6e, 0x44, 0x69,
	0x73, 0x6b, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x11, 0x69, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x75, 0x6c, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75,
	0x6c, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x74, 0x72, 0x50, 0x72, 0x65, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x74, 0x72, 0x50, 0x72, 0x65, 0x70,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x74, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x74, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69,
	0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x3f, 0x0a, 0x11,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7d, 0x0a,
	0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x73, 0x67, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x0e, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc6, 0x02, 0x0a,
	0x0d, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x33,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61,
	0x63, 0x6b, 0x12, 0x33, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x1a, 0x83, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x3f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x05, 0x0a,
	0x03, 0x41, 0x63, 0x6b, 0x1a, 0x07, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x42, 0x06, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x92, 0x04, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xc9,
	0x03, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x95, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x73, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0xa8, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x20, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x44, 0x4f, 0x55, 0x54, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x54, 0x44, 0x45, 0x52, 0x52, 0x10, 0x01, 0x32, 0xb8, 0x02, 0x0a, 0x0e, 0x52,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x32, 0x0a,
	0x06, 0x45, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x12, 0x11, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x1a, 0x11, 0x2e, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x3b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x3a,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x12, 0x11, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x73, 0x67, 0x1a, 0x14, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x15, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x1a,
	0x16, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x28, 0x01, 0x30, 0x01, 0x12, 0x38, 0x0a, 0x07, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x12, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a,
	0x14, 0x2e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_runner_proto_rawDescOnce sync.Once
	file_runner_proto_rawDescData = file_runner_proto_rawDesc
)

func file_runner_proto_rawDescGZIP() []byte {
	file_runner_proto_rawDescOnce.Do(func() {
		file_runner_proto_rawDescData = protoimpl.X.CompressGZIP(file_runner_proto_rawDescData)
	})
	return file_runner_proto_rawDescData
}

var file_runner_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_runner_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_runner_proto_goTypes = []interface{}{
	(LogResponseMsg_Container_Request_Line_Source)(0), // 0: runner.LogResponseMsg.Container.Request.Line.Source
	(*TryCall)(nil),                          // 1: runner.TryCall
	(*DataFrame)(nil),                        // 2: runner.DataFrame
	(*HttpHeader)(nil),                       // 3: runner.HttpHeader
	(*HttpRespMeta)(nil),                     // 4: runner.HttpRespMeta
	(*CallResultStart)(nil),                  // 5: runner.CallResultStart
	(*CallFinished)(nil),                     // 6: runner.CallFinished
	(*ClientMsg)(nil),                        // 7: runner.ClientMsg
	(*RunnerMsg)(nil),                        // 8: runner.RunnerMsg
	(*RunnerStatus)(nil),                     // 9: runner.RunnerStatus
	(*ConfigMsg)(nil),                        // 10: runner.ConfigMsg
	(*ConfigStatus)(nil),                     // 11: runner.ConfigStatus
	(*LogRequestMsg)(nil),                    // 12: runner.LogRequestMsg
	(*LogResponseMsg)(nil),                   // 13: runner.LogResponseMsg
	nil,                                      // 14: runner.TryCall.ExtensionsEntry
	nil,                                      // 15: runner.RunnerStatus.CustomStatusEntry
	nil,                                      // 16: runner.ConfigMsg.ConfigEntry
	(*LogRequestMsg_Start)(nil),              // 17: runner.LogRequestMsg.Start
	(*LogRequestMsg_Ack)(nil),                // 18: runner.LogRequestMsg.Ack
	(*LogRequestMsg_Ready)(nil),              // 19: runner.LogRequestMsg.Ready
	nil,                                      // 20: runner.LogRequestMsg.Start.ConfigEntry
	(*LogResponseMsg_Container)(nil),         // 21: runner.LogResponseMsg.Container
	(*LogResponseMsg_Container_Request)(nil), // 22: runner.LogResponseMsg.Container.Request
	(*LogResponseMsg_Container_Request_Line)(nil), // 23: runner.LogResponseMsg.Container.Request.Line
	(*emptypb.Empty)(nil),                         // 24: google.protobuf.Empty
	(*structpb.Struct)(nil),                       // 25: google.protobuf.Struct
}
var file_runner_proto_depIdxs = []int32{
	14, // 0: runner.TryCall.extensions:type_name -> runner.TryCall.ExtensionsEntry
	3,  // 1: runner.HttpRespMeta.headers:type_name -> runner.HttpHeader
	4,  // 2: runner.CallResultStart.http:type_name -> runner.HttpRespMeta
	1,  // 3: runner.ClientMsg.try:type_name -> runner.TryCall
	2,  // 4: runner.ClientMsg.data:type_name -> runner.DataFrame
	5,  // 5: runner.RunnerMsg.result_start:type_name -> runner.CallResultStart
	2,  // 6: runner.RunnerMsg.data:type_name -> runner.DataFrame
	6,  // 7: runner.RunnerMsg.finished:type_name -> runner.CallFinished
	15, // 8: runner.RunnerStatus.customStatus:type_name -> runner.RunnerStatus.CustomStatusEntry
	16, // 9: runner.ConfigMsg.config:type_name -> runner.ConfigMsg.ConfigEntry
	17, // 10: runner.LogRequestMsg.start:type_name -> runner.LogRequestMsg.Start
	18, // 11: runner.LogRequestMsg.ack:type_name -> runner.LogRequestMsg.Ack
	19, // 12: runner.LogRequestMsg.ready:type_name -> runner.LogRequestMsg.Ready
	21, // 13: runner.LogResponseMsg.data:type_name -> runner.LogResponseMsg.Container
	20, // 14: runner.LogRequestMsg.Start.config:type_name -> runner.LogRequestMsg.Start.ConfigEntry
	22, // 15: runner.LogResponseMsg.Container.data:type_name -> runner.LogResponseMsg.Container.Request
	23, // 16: runner.LogResponseMsg.Container.Request.data:type_name -> runner.LogResponseMsg.Container.Request.Line
	0,  // 17: runner.LogResponseMsg.Container.Request.Line.source:type_name -> runner.LogResponseMsg.Container.Request.Line.Source
	7,  // 18: runner.RunnerProtocol.Engage:input_type -> runner.ClientMsg
	24, // 19: runner.RunnerProtocol.Status:input_type -> google.protobuf.Empty
	10, // 20: runner.RunnerProtocol.ConfigureRunner:input_type -> runner.ConfigMsg
	12, // 21: runner.RunnerProtocol.StreamLogs:input_type -> runner.LogRequestMsg
	25, // 22: runner.RunnerProtocol.Status2:input_type -> google.protobuf.Struct
	8,  // 23: runner.RunnerProtocol.Engage:output_type -> runner.RunnerMsg
	9,  // 24: runner.RunnerProtocol.Status:output_type -> runner.RunnerStatus
	11, // 25: runner.RunnerProtocol.ConfigureRunner:output_type -> runner.ConfigStatus
	13, // 26: runner.RunnerProtocol.StreamLogs:output_type -> runner.LogResponseMsg
	9,  // 27: runner.RunnerProtocol.Status2:output_type -> runner.RunnerStatus
	23, // [23:28] is the sub-list for method output_type
	18, // [18:23] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_runner_proto_init() }
func file_runner_proto_init() {
	if File_runner_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_runner_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TryCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpRespMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallResultStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallFinished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogRequestMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogResponseMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogRequestMsg_Start); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogRequestMsg_Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogRequestMsg_Ready); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogResponseMsg_Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogResponseMsg_Container_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runner_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogResponseMsg_Container_Request_Line); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_runner_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*CallResultStart_Http)(nil),
	}
	file_runner_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ClientMsg_Try)(nil),
		(*ClientMsg_Data)(nil),
	}
	file_runner_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*RunnerMsg_ResultStart)(nil),
		(*RunnerMsg_Data)(nil),
		(*RunnerMsg_Finished)(nil),
	}
	file_runner_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*LogRequestMsg_Start_)(nil),
		(*LogRequestMsg_Ack_)(nil),
		(*LogRequestMsg_Ready_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_runner_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_runner_proto_goTypes,
		DependencyIndexes: file_runner_proto_depIdxs,
		EnumInfos:         file_runner_proto_enumTypes,
		MessageInfos:      file_runner_proto_msgTypes,
	}.Build()
	File_runner_proto = out.File
	file_runner_proto_rawDesc = nil
	file_runner_proto_goTypes = nil
	file_runner_proto_depIdxs = nil
}
