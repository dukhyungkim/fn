// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: runner.proto

package runner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RunnerProtocol_Engage_FullMethodName          = "/runner.RunnerProtocol/Engage"
	RunnerProtocol_Status_FullMethodName          = "/runner.RunnerProtocol/Status"
	RunnerProtocol_ConfigureRunner_FullMethodName = "/runner.RunnerProtocol/ConfigureRunner"
	RunnerProtocol_StreamLogs_FullMethodName      = "/runner.RunnerProtocol/StreamLogs"
	RunnerProtocol_Status2_FullMethodName         = "/runner.RunnerProtocol/Status2"
)

// RunnerProtocolClient is the client API for RunnerProtocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunnerProtocolClient interface {
	Engage(ctx context.Context, opts ...grpc.CallOption) (RunnerProtocol_EngageClient, error)
	// Deprecated: Do not use.
	// Rather than rely on Prometheus for this, expose status that's specific to the runner lifecycle through this.
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RunnerStatus, error)
	// Configure the remote runner by passing config data.
	ConfigureRunner(ctx context.Context, in *ConfigMsg, opts ...grpc.CallOption) (*ConfigStatus, error)
	// Logging Interface
	StreamLogs(ctx context.Context, opts ...grpc.CallOption) (RunnerProtocol_StreamLogsClient, error)
	// If a status image container is configured (for handling custom statuses)
	// / the supplied opaque JSON is passed as an input to that image.
	// Output from the container is sent back via RunnerStatus.Details
	// as before.
	Status2(ctx context.Context, in *structpb.Struct, opts ...grpc.CallOption) (*RunnerStatus, error)
}

type runnerProtocolClient struct {
	cc grpc.ClientConnInterface
}

func NewRunnerProtocolClient(cc grpc.ClientConnInterface) RunnerProtocolClient {
	return &runnerProtocolClient{cc}
}

func (c *runnerProtocolClient) Engage(ctx context.Context, opts ...grpc.CallOption) (RunnerProtocol_EngageClient, error) {
	stream, err := c.cc.NewStream(ctx, &RunnerProtocol_ServiceDesc.Streams[0], RunnerProtocol_Engage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &runnerProtocolEngageClient{stream}
	return x, nil
}

type RunnerProtocol_EngageClient interface {
	Send(*ClientMsg) error
	Recv() (*RunnerMsg, error)
	grpc.ClientStream
}

type runnerProtocolEngageClient struct {
	grpc.ClientStream
}

func (x *runnerProtocolEngageClient) Send(m *ClientMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *runnerProtocolEngageClient) Recv() (*RunnerMsg, error) {
	m := new(RunnerMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Deprecated: Do not use.
func (c *runnerProtocolClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RunnerStatus, error) {
	out := new(RunnerStatus)
	err := c.cc.Invoke(ctx, RunnerProtocol_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerProtocolClient) ConfigureRunner(ctx context.Context, in *ConfigMsg, opts ...grpc.CallOption) (*ConfigStatus, error) {
	out := new(ConfigStatus)
	err := c.cc.Invoke(ctx, RunnerProtocol_ConfigureRunner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerProtocolClient) StreamLogs(ctx context.Context, opts ...grpc.CallOption) (RunnerProtocol_StreamLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RunnerProtocol_ServiceDesc.Streams[1], RunnerProtocol_StreamLogs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &runnerProtocolStreamLogsClient{stream}
	return x, nil
}

type RunnerProtocol_StreamLogsClient interface {
	Send(*LogRequestMsg) error
	Recv() (*LogResponseMsg, error)
	grpc.ClientStream
}

type runnerProtocolStreamLogsClient struct {
	grpc.ClientStream
}

func (x *runnerProtocolStreamLogsClient) Send(m *LogRequestMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *runnerProtocolStreamLogsClient) Recv() (*LogResponseMsg, error) {
	m := new(LogResponseMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *runnerProtocolClient) Status2(ctx context.Context, in *structpb.Struct, opts ...grpc.CallOption) (*RunnerStatus, error) {
	out := new(RunnerStatus)
	err := c.cc.Invoke(ctx, RunnerProtocol_Status2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerProtocolServer is the server API for RunnerProtocol service.
// All implementations must embed UnimplementedRunnerProtocolServer
// for forward compatibility
type RunnerProtocolServer interface {
	Engage(RunnerProtocol_EngageServer) error
	// Deprecated: Do not use.
	// Rather than rely on Prometheus for this, expose status that's specific to the runner lifecycle through this.
	Status(context.Context, *emptypb.Empty) (*RunnerStatus, error)
	// Configure the remote runner by passing config data.
	ConfigureRunner(context.Context, *ConfigMsg) (*ConfigStatus, error)
	// Logging Interface
	StreamLogs(RunnerProtocol_StreamLogsServer) error
	// If a status image container is configured (for handling custom statuses)
	// / the supplied opaque JSON is passed as an input to that image.
	// Output from the container is sent back via RunnerStatus.Details
	// as before.
	Status2(context.Context, *structpb.Struct) (*RunnerStatus, error)
	mustEmbedUnimplementedRunnerProtocolServer()
}

// UnimplementedRunnerProtocolServer must be embedded to have forward compatible implementations.
type UnimplementedRunnerProtocolServer struct {
}

func (UnimplementedRunnerProtocolServer) Engage(RunnerProtocol_EngageServer) error {
	return status.Errorf(codes.Unimplemented, "method Engage not implemented")
}
func (UnimplementedRunnerProtocolServer) Status(context.Context, *emptypb.Empty) (*RunnerStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedRunnerProtocolServer) ConfigureRunner(context.Context, *ConfigMsg) (*ConfigStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureRunner not implemented")
}
func (UnimplementedRunnerProtocolServer) StreamLogs(RunnerProtocol_StreamLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedRunnerProtocolServer) Status2(context.Context, *structpb.Struct) (*RunnerStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status2 not implemented")
}
func (UnimplementedRunnerProtocolServer) mustEmbedUnimplementedRunnerProtocolServer() {}

// UnsafeRunnerProtocolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunnerProtocolServer will
// result in compilation errors.
type UnsafeRunnerProtocolServer interface {
	mustEmbedUnimplementedRunnerProtocolServer()
}

func RegisterRunnerProtocolServer(s grpc.ServiceRegistrar, srv RunnerProtocolServer) {
	s.RegisterService(&RunnerProtocol_ServiceDesc, srv)
}

func _RunnerProtocol_Engage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RunnerProtocolServer).Engage(&runnerProtocolEngageServer{stream})
}

type RunnerProtocol_EngageServer interface {
	Send(*RunnerMsg) error
	Recv() (*ClientMsg, error)
	grpc.ServerStream
}

type runnerProtocolEngageServer struct {
	grpc.ServerStream
}

func (x *runnerProtocolEngageServer) Send(m *RunnerMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *runnerProtocolEngageServer) Recv() (*ClientMsg, error) {
	m := new(ClientMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RunnerProtocol_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerProtocolServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerProtocol_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerProtocolServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerProtocol_ConfigureRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerProtocolServer).ConfigureRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerProtocol_ConfigureRunner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerProtocolServer).ConfigureRunner(ctx, req.(*ConfigMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunnerProtocol_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RunnerProtocolServer).StreamLogs(&runnerProtocolStreamLogsServer{stream})
}

type RunnerProtocol_StreamLogsServer interface {
	Send(*LogResponseMsg) error
	Recv() (*LogRequestMsg, error)
	grpc.ServerStream
}

type runnerProtocolStreamLogsServer struct {
	grpc.ServerStream
}

func (x *runnerProtocolStreamLogsServer) Send(m *LogResponseMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *runnerProtocolStreamLogsServer) Recv() (*LogRequestMsg, error) {
	m := new(LogRequestMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RunnerProtocol_Status2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(structpb.Struct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerProtocolServer).Status2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerProtocol_Status2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerProtocolServer).Status2(ctx, req.(*structpb.Struct))
	}
	return interceptor(ctx, in, info, handler)
}

// RunnerProtocol_ServiceDesc is the grpc.ServiceDesc for RunnerProtocol service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunnerProtocol_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runner.RunnerProtocol",
	HandlerType: (*RunnerProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _RunnerProtocol_Status_Handler,
		},
		{
			MethodName: "ConfigureRunner",
			Handler:    _RunnerProtocol_ConfigureRunner_Handler,
		},
		{
			MethodName: "Status2",
			Handler:    _RunnerProtocol_Status2_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Engage",
			Handler:       _RunnerProtocol_Engage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamLogs",
			Handler:       _RunnerProtocol_StreamLogs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "runner.proto",
}
